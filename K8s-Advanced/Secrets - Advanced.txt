Sealed Secrets on Kubernetes with ArgoCD and Terraform:

	In this article, you will learn how to manage secrets securely on Kubernetes in the GitOps approach using Sealed Secrets, ArgoCD, and Terraform. 
	We will use Terraform for setting up both Sealed Secrets and ArgoCD on the Kubernetes cluster.
	ArgoCD will realize the GitOps model by synchronizing encrypted secrets from the Git repository to the cluster. 
	Sealed Secrets decrypts the data and create a standard Kubernetes Secret object instead of the encrypted SealedSecret CRD from the Git repository.

How it works? 

	Let’s discuss our architecture in greater detail. In the first step, we are installing ArgoCD and Sealed Secrets on Kubernetes with Terraform. 
	In order to install both these tools, we will leverage Terraform support for Helm charts. 
	During ArgoCD installation we will also create the Application that refers to the Git repository with configuration 
		(1). This repository will contain YAML manifests including an encrypted version of our Kubernetes Secret. 
		     When Terraform installs Sealed Secrets it sets the private key for secrets decryption and the public key for encryption 
		(2). Once we successfully install Sealed Secrets we can interact with its controller running on the cluster with kubeseal CLI. 
		     With the kubeseal command we can get an encrypted version of the input Kubernetes Secret.
		(3). Then we place an encrypted secret inside the repository with the app deployment manifests.
		(4). Argo CD will automatically apply the latest configuration to the Kubernetes cluster. 
		(5). Once the new encrypted secret appears Sealed Secrets detects it and tries to decrypt using a previously set private key. 
		(6). As a result, a new Secret object is created and then injected into our sample app. 
		(7). That’s the last step of our exercise. We will test the result using the HTTP endpoint exposed by the app.

	Kubeseal:

		Sealed Secrets is composed of two parts:

			A cluster-side controller / operator
			A client-side utility: kubeseal
			The kubeseal utility uses asymmetric crypto to encrypt secrets that only the controller can decrypt.

		These encrypted secrets are encoded in a SealedSecret resource, which you can see as a recipe for creating a secret. Here is how it looks:

			apiVersion: bitnami.com/v1alpha1
			kind: SealedSecret
			metadata:
  			  name: mysecret
  			  namespace: mynamespace
			  spec:
  			    encryptedData:
   			    foo: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEq.....

		Once unsealed this will produce a secret equivalent to this:

			apiVersion: v1
			kind: Secret
			metadata:
  			  name: mysecret
  			  namespace: mynamespace
			data:
 			   foo: YmFy  # <- base64 encoded "bar"

		Command:	
			helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets
			helm install sealed-secrets -n kube-system --set-string fullnameOverride=sealed-secrets-controller sealed-secrets/sealed-secrets

		How to use kubeseal if the controller is not running within the kube-system namespace?

		If you installed the controller in a different namespace than the default kube-system, you need to provide this namespace to the kubeseal commandline 
		tool. There are two options:

			You can specify the namespace via the command line option --controller-namespace <namespace>:
					kubeseal --controller-namespace sealed-secrets <mysecret.json >mysealedsecret.json
			Via the environment variable SEALED_SECRETS_CONTROLLER_NAMESPACE:
					export SEALED_SECRETS_CONTROLLER_NAMESPACE=sealed-secrets
					kubeseal <mysecret.json >mysealedsecret.json